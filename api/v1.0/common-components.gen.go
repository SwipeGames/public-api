// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package apiv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ErrorResponseWithActionAction.
const (
	Refresh ErrorResponseWithActionAction = "refresh"
)

// ErrorResponse Common error response for Swipe Games Public API.
type ErrorResponse struct {
	// Details Technical details for the error. Could be used for debugging, should not be shown to the player.
	Details string `json:"details"`

	// Message A brief description of the error in English. Could be shown to the player.
	Message string `json:"message"`
}

// ErrorResponseWithAction defines model for ErrorResponseWithAction.
type ErrorResponseWithAction struct {
	// Action Required client action.
	// - `refresh` - shows a refresh button to the player. Player cannot continue without refreshing the game page.
	//      It's useful when the game session expires or the game is not available anymore. Once page is refreshed,
	//      the game will be reloaded and the player can continue playing. This might not work when games aren't embedded
	//      in the casino, but are opened in a new tab or window, since it will reopen the game again.
	Action *ErrorResponseWithActionAction `json:"action,omitempty"`

	// ActionData Client action related data.
	// You can pass additional data to the client action. Not all actions require this field.
	ActionData *string `json:"actionData,omitempty"`

	// Details Technical details for the error. Could be used for debugging, should not be shown to the player.
	Details string `json:"details"`

	// Message A brief description of the error in English. Could be shown to the player.
	Message string `json:"message"`
}

// ErrorResponseWithActionAction Required client action.
//   - `refresh` - shows a refresh button to the player. Player cannot continue without refreshing the game page.
//     It's useful when the game session expires or the game is not available anymore. Once page is refreshed,
//     the game will be reloaded and the player can continue playing. This might not work when games aren't embedded
//     in the casino, but are opened in a new tab or window, since it will reopen the game again.
type ErrorResponseWithActionAction string

// User defines model for User.
type User struct {
	// Country Country code ISO 3166-1 alpha-2.
	Country   *string `json:"country,omitempty"`
	FirstName *string `json:"firstName,omitempty"`

	// Id User's ID (external for real game, internal for demo game).
	Id       string  `json:"id"`
	LastName *string `json:"lastName,omitempty"`
	NickName *string `json:"nickName,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4xV32scRwz+V8S04ATWZ9JCHu7NJKbcS2ySlFLiQLQz2l01s5rtjLYXc9z/XmZ276ev",
	"pn7xnaSRvk+fpNsYG/ohCIkms9yYZDvqsXy8izHEj5SGIImywVGykQflIGZp3oW+DwKUoyDOYdCECJ/W",
	"PBD8hj0leBhrzxZuH1YLU5khhoGiMqUpnyL79Dz1Z7KdsEUPc0hJqx1N1RbwLozeQU0wJnLF6age25al",
	"rSB1xStBc0TqwlpAQ3k+eHyimJHo00BmaZJGltZsK9NTSthe4HkLdWRq4MgKoTmgARa4k9Zz6o6A/b+y",
	"28pE+nvkSM4sv+wxVPvWfN0/CfVfZDUjPdHlD9bu1k5QNwa9v2/M8svG/BypMUvz081B3ptZ25tTYbfV",
	"5kwX3Oc77cTHGSpYzyQKU9ziUa7hW6QmUuq+wXWhngBhNkE9qobzXsBD+Q8WJQtlgyjLSLBm7cKou8cs",
	"bXnVYk8wYEuLR4H8t9KrlNVvRg/rjuQQlSilrBH9GDhSgnlyio9TGQv8B9lj7QlQnvoQaQH3YqcCOWYu",
	"Tq6aq+0TrNn7LG8kH9CRAxR3RCvTOXDJNpZ2AZ87TtBz22kpvw7x+wS6LTuCkeRKgfqanCM31+SJk8XE",
	"EqrcxRwIYSAhl70IQmtQrDPFNYsL6woSZyKsE9JIOfwAH1vkLJipDMnY55mbuR5N2mEnJoHfo+KF9T+e",
	"gdwPVHLgUHHxKH+GsbRiwJQAneMclNcZFXeDcDpE8CHr4v38PWtQhg00965h8m7C/XyDzhbka3WG9O7l",
	"C7USpTZioXHrcFCKx1cLVnLMYAf+0vGrHoWnUUaWBCi77hT4oB3qfEVqSiVNvLhR8MruzkjoWV9n4tvK",
	"/J4oZh1Ol9WGUTQ+XbrPxQE2OILVp3v49c3bt9dvAP3Q4fUvF49gwzHpB+zLGXzmZfe8SgZ1lWD1Hl7R",
	"D6WYe9SUnqAvM1cBy5HdUR+K/fVFAB5fqC9sv/+H8+yQsrtwOXMQSxPMUkbvK5NXAwc2S5N/mVC7NHm2",
	"/wYAAP//2flyzhQHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
