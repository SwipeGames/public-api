openapi: 3.0.3
info:
  title: Swipe Games Integration Adapter Public API
  description: |
    This is the Integration Adapter API for Swipe Games Public API.
    It is used to make reverse calls to integrations working through Public API.
    Please implement this API on your side to support Swipe Games Public API.

  version: 1.0.0

paths:
  /balance:
    get:
      summary: Get balance
      tags:
        - Get Balance
      description: |
        This endpoint is used to get the player's balance.
        Please make sure that this endpoint responds as quickly as possible,
        so player's experience is not affected.

      parameters:
        - name: X-REQUEST-SIGN
          in: header
          required: true
          description: Request signature (read more in the Authentication section)
          schema:
            type: string
        - name: sessionID
          in: query
          required: true
          description: |
            Session ID (external). Provided by client via `Create New Game` call.
            This is your Session ID. We use it in all reverse calls to you.
          schema:
            type: string

      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BalanceResponse"

        401:
          description: Wrong signature
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"

        404:
          description: User with this game session ID not found
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"

        500:
          description: Server error occurred
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"
  /bet:
    post:
      tags:
        - Bet
      summary: Bet
      description: |
        This endpoint is used to place a bet in the game.
        Every time player places a bet, we send a request to this endpoint and wait for the answer (**sync request**).

        Please make sure that this endpoint responds as quickly as possible,
        so player's experience is not affected.

        In case we receive not 200 (OK) response or 5 seconds timeout we will send following `refund request.
      parameters:
        - name: X-REQUEST-SIGN
          in: header
          required: true
          description: Request signature (read more in the Authentication section)
          schema:
            type: string

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BetRequest"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BetResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"
        401:
          description: Wrong signature
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"
        404:
          description: User with this game session ID not found
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"

  /win:
    post:
      tags:
        - Win
      summary: Win
      description: |
        This endpoint is used to place a win in the game.

        Every time player wins, or round ended without a win (in this case amount is 0),
        we send a request to this endpoint and wait for the answer. Wait time is 5 seconds.

        After timeout or any error this request will be retrying in the background until we receive 200(OK) response.
      parameters:
        - name: X-REQUEST-SIGN
          in: header
          required: true
          description: Request signature (read more in the Authentication section)
          schema:
            type: string

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WinRequest"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WinResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"
        401:
          description: Wrong signature
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"
        404:
          description: User with this game session ID not found
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"

  /refund:
    post:
      tags:
        - Refund
      summary: Refund
      description: |
        This endpoint is used to place a refund for bet or win action.
        We send refund to the client side in case of Bet 500 error or timeout, also
        in case when player cancels the game.

        After timeout or any error this request will be retrying until we receive 200(OK) response.
      parameters:
        - name: X-REQUEST-SIGN
          in: header
          required: true
          description: Request signature (read more in the Authentication section)
          schema:
            type: string

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefundRequest"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"
        401:
          description: Wrong signature
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"
        404:
          description: User with this game session ID not found
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "../common-components.yaml#/components/schemas/ErrorResponseWithAction"

components:
  schemas:
    BalanceResponse:
      type: object
      required:
        - balance
      properties:
        balance:
          description: |
            The player's balance in selected currency **main** units (**not cents**).
            Currency selected by the client during the `Create New Game` call.
            We support 2 decimal places for all fiat currencies.
          type: string
          example: "100.10"
    BetRequest:
      type: object
      required:
        - type
        - sessionID
        - amount
        - txID
      properties:
        type:
          description: |
            The type of the bet.
            - `regular` type means regular bet,
            - `free` type means free bet (see Free Rounds section).
          type: string
          enum:
            - regular
            - free
          example: regular
        sessionID:
          type: string
          description: |
            The Game Session's ID (external). Provided by client via `Create New Game` call.
          example: some_external_session_id
        amount:
          description: |
            The amount of the bet in currency **main** units (**not cents**).
            Currency selected by the client during the `Create New Game` call.
            We support 2 decimal places for all fiat currencies.
          type: string
          example: "100.10"
        txID:
          description: |
            Unique ID for the bet (internal) on Swipe Games' side.
            Could be used as idempotency key.
          type: string
          format: uuid
          example: "c27ccade-5a45-4157-a85f-7d023a689ea5"

    BetResponse:
      type: object
      required:
        - balance
        - txID
      properties:
        balance:
          description: |
            The player's balance in selected currency **main** units (note: not cents) after the bet is applied.
            Currency selected by the client during the `Create New Game` call.
            We support 2 decimal places for all fiat currencies.
          type: string
          example: "100.10"
        txID:
          description: Unique ID for the bet on your side. This is required for further tracking/debugging pusposes.
          type: string
          example: "some_external_bet_tx_id"

    WinRequest:
      type: object
      required:
        - type
        - sessionID
        - amount
        - txID
      properties:
        type:
          description: |
            The type of the win.
            - `regular` type means regular bet,
            - `free` type means free bet (see Free Rounds section).
          type: string
          enum:
            - regular
            - free
          example: regular
        sessionID:
          type: string
          description: |
            The Game Session's ID (external). Provided by client via `Create New Game` call.
          example: some_external_session_id
        amount:
          description: |
            The amount of the bet in currency **main** units (note: not cents). Currency selected by the client during the
            `Create New Game` call. We support 2 decimal places for all fiat currencies.
          type: string
          example: "100.10"
        txID:
          description: |
            Unique ID for the win (internal) on Swipe Games' side.
            Could be used as idempotency key.
          type: string
          format: uuid
          example: "c27ccade-5a45-4157-a85f-7d023a689ea5"

    WinResponse:
      type: object
      required:
        - balance
        - txID
      properties:
        balance:
          description: |
            The player's balance in selected currency **main** units (note: not cents) after the win is applied.
            Currency selected by the client during the `Create New Game` call.
            We support 2 decimal places for all fiat currencies.
          type: string
          example: "100.10"
        txID:
          description: Unique ID for the win on your side. This is required for further tracking/debugging pusposes.
          type: string
          example: "some_external_bet_tx_id"

    RefundRequest:
      type: object
      required:
        - sessionId
        - txID
      properties:
        sessionID:
          type: string
          description: |
            The Game Session's ID (external). Provided by client via `Create New Game` call.
          example: some_external_session_id
        txID:
          description: |
            Unique ID for the refund (internal) on Swipe Games' side.
            Could be used as idempotency key.
          type: string
          format: uuid
          example: "c27ccade-5a45-4157-a85f-7d023a689ea5"

    RefundResponse:
      type: object
      required:
        - balance
        - txID
      properties:
        balance:
          description: |
            The user's balance in selected currency **main** units (note: not cents) after the refund is applied.
            Currency selected by the client during the `Create New Game` call.
            We support 2 decimal places for all fiat currencies.
          type: string
          example: "100.10"
        txID:
          description: Unique ID for the refund on your side. This is required for further tracking/debugging pusposes.
          type: string
          example: "some_external_bet_tx_id"
