// Package swipegamesintegrationapiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package swipegamesintegrationapiv1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/swipegames/public-api/api/v1.0"
)

// Defines values for BetRequestType.
const (
	BetRequestTypeFree    BetRequestType = "free"
	BetRequestTypeRegular BetRequestType = "regular"
)

// Defines values for WinRequestType.
const (
	WinRequestTypeFree    WinRequestType = "free"
	WinRequestTypeRegular WinRequestType = "regular"
)

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse struct {
	// Balance The player's balance in selected currency **main** units (**not cents**).
	// Currency selected by the client during the `Create New Game` call.
	// We support 2 decimal places for all fiat currencies.
	Balance string `json:"balance"`
}

// BetRequest defines model for BetRequest.
type BetRequest struct {
	// Amount The amount of the bet in currency **main** units (**not cents**).
	// Currency selected by the client during the `Create New Game` call.
	// We support 2 decimal places for all fiat currencies.
	Amount string `json:"amount"`

	// FrID Free Rounds ID (external).
	// This field is provided only for free rounds (where `type` is `free`).
	FrID *string `json:"frID,omitempty"`

	// RoundID Non unique ID for the round (internal) on Swipe Games' side.
	// Could be the same for different games.
	RoundID openapi_types.UUID `json:"roundID"`

	// SessionID The Game Session's ID (external). Provided by client via `Create New Game` call.
	SessionID string `json:"sessionID"`

	// TxID Unique ID for the bet (internal) on Swipe Games' side.
	// Could be used as idempotency key.
	TxID openapi_types.UUID `json:"txID"`

	// Type The type of the bet.
	// - `regular` type means regular bet,
	// - `free` type means free bet (see Free Rounds section).
	Type BetRequestType `json:"type"`
}

// BetRequestType The type of the bet.
// - `regular` type means regular bet,
// - `free` type means free bet (see Free Rounds section).
type BetRequestType string

// BetResponse defines model for BetResponse.
type BetResponse struct {
	// Balance The player's balance in selected currency **main** units (note: not cents) after the bet is applied.
	// Currency selected by the client during the `Create New Game` call.
	// We support 2 decimal places for all fiat currencies.
	Balance string `json:"balance"`

	// TxID Unique ID for the bet on your side. This is required for further tracking/debugging pusposes.
	TxID string `json:"txID"`
}

// RefundRequest defines model for RefundRequest.
type RefundRequest struct {
	// Amount The amount of the refund in currency **main** units (note: not cents).
	// Currency selected by the client during the `Create New Game` call.
	// We support 2 decimal places for all fiat currencies.
	// Refunds are always done for the whole bet amount.
	Amount string `json:"amount"`

	// OrigTxID Original transaction ID (external).
	// This is the ID of the transaction on your side that should be refunded.
	OrigTxID openapi_types.UUID `json:"origTxID"`

	// SessionID The Game Session's ID (external). Provided by client via `Create New Game` call.
	SessionID string `json:"sessionID"`

	// TxID Unique ID for the refund (internal) on Swipe Games' side.
	// Could be used as idempotency key.
	TxID openapi_types.UUID `json:"txID"`
}

// RefundResponse defines model for RefundResponse.
type RefundResponse struct {
	// Balance The user's balance in selected currency **main** units (note: not cents) after the refund is applied.
	// Currency selected by the client during the `Create New Game` call.
	// We support 2 decimal places for all fiat currencies.
	Balance string `json:"balance"`

	// TxID Unique ID for the refund on your side. This is required for further tracking/debugging pusposes.
	TxID string `json:"txID"`
}

// WinRequest defines model for WinRequest.
type WinRequest struct {
	// Amount The amount of the bet in currency **main** units (note: not cents). Currency selected by the client during the
	// `Create New Game` call. We support 2 decimal places for all fiat currencies.
	Amount string `json:"amount"`

	// FrID Free Rounds ID (external).
	// This field is provided only for free rounds (where `type` is `free`).
	FrID *string `json:"frID,omitempty"`

	// RoundID Non unique ID for the round (internal) on Swipe Games' side.
	// Could be the same for different games.
	RoundID openapi_types.UUID `json:"roundID"`

	// SessionID The Game Session's ID (external). Provided by client via `Create New Game` call.
	SessionID string `json:"sessionID"`

	// TxID Unique ID for the win (internal) on Swipe Games' side.
	// Could be used as idempotency key.
	TxID openapi_types.UUID `json:"txID"`

	// Type The type of the win.
	// - `regular` type means regular bet,
	// - `free` type means free bet (see Free Rounds section).
	Type WinRequestType `json:"type"`
}

// WinRequestType The type of the win.
// - `regular` type means regular bet,
// - `free` type means free bet (see Free Rounds section).
type WinRequestType string

// WinResponse defines model for WinResponse.
type WinResponse struct {
	// Balance The player's balance in selected currency **main** units (note: not cents) after the win is applied.
	// Currency selected by the client during the `Create New Game` call.
	// We support 2 decimal places for all fiat currencies.
	Balance string `json:"balance"`

	// TxID Unique ID for the win on your side. This is required for further tracking/debugging pusposes.
	TxID string `json:"txID"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {
	// SessionID Session ID (external). Provided by client via `Create New Game` call.
	// This is your Session ID. We use it in all reverse calls to you.
	SessionID string `form:"sessionID" json:"sessionID"`

	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PostBetParams defines parameters for PostBet.
type PostBetParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PostRefundParams defines parameters for PostRefund.
type PostRefundParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PostWinParams defines parameters for PostWin.
type PostWinParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PostBetJSONRequestBody defines body for PostBet for application/json ContentType.
type PostBetJSONRequestBody = BetRequest

// PostRefundJSONRequestBody defines body for PostRefund for application/json ContentType.
type PostRefundJSONRequestBody = RefundRequest

// PostWinJSONRequestBody defines body for PostWin for application/json ContentType.
type PostWinJSONRequestBody = WinRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBalance request
	GetBalance(ctx context.Context, params *GetBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBetWithBody request with any body
	PostBetWithBody(ctx context.Context, params *PostBetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBet(ctx context.Context, params *PostBetParams, body PostBetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRefundWithBody request with any body
	PostRefundWithBody(ctx context.Context, params *PostRefundParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRefund(ctx context.Context, params *PostRefundParams, body PostRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWinWithBody request with any body
	PostWinWithBody(ctx context.Context, params *PostWinParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWin(ctx context.Context, params *PostWinParams, body PostWinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBalance(ctx context.Context, params *GetBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBetWithBody(ctx context.Context, params *PostBetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBet(ctx context.Context, params *PostBetParams, body PostBetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBetRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRefundWithBody(ctx context.Context, params *PostRefundParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRefundRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRefund(ctx context.Context, params *PostRefundParams, body PostRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRefundRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWinWithBody(ctx context.Context, params *PostWinParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWinRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWin(ctx context.Context, params *PostWinParams, body PostWinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWinRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBalanceRequest generates requests for GetBalance
func NewGetBalanceRequest(server string, params *GetBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sessionID", runtime.ParamLocationQuery, params.SessionID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewPostBetRequest calls the generic PostBet builder with application/json body
func NewPostBetRequest(server string, params *PostBetParams, body PostBetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBetRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostBetRequestWithBody generates requests for PostBet with any type of body
func NewPostBetRequestWithBody(server string, params *PostBetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewPostRefundRequest calls the generic PostRefund builder with application/json body
func NewPostRefundRequest(server string, params *PostRefundParams, body PostRefundJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRefundRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRefundRequestWithBody generates requests for PostRefund with any type of body
func NewPostRefundRequestWithBody(server string, params *PostRefundParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/refund")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewPostWinRequest calls the generic PostWin builder with application/json body
func NewPostWinRequest(server string, params *PostWinParams, body PostWinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWinRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostWinRequestWithBody generates requests for PostWin with any type of body
func NewPostWinRequestWithBody(server string, params *PostWinParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/win")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBalanceWithResponse request
	GetBalanceWithResponse(ctx context.Context, params *GetBalanceParams, reqEditors ...RequestEditorFn) (*GetBalanceResponse, error)

	// PostBetWithBodyWithResponse request with any body
	PostBetWithBodyWithResponse(ctx context.Context, params *PostBetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBetResponse, error)

	PostBetWithResponse(ctx context.Context, params *PostBetParams, body PostBetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBetResponse, error)

	// PostRefundWithBodyWithResponse request with any body
	PostRefundWithBodyWithResponse(ctx context.Context, params *PostRefundParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRefundResponse, error)

	PostRefundWithResponse(ctx context.Context, params *PostRefundParams, body PostRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRefundResponse, error)

	// PostWinWithBodyWithResponse request with any body
	PostWinWithBodyWithResponse(ctx context.Context, params *PostWinParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWinResponse, error)

	PostWinWithResponse(ctx context.Context, params *PostWinParams, body PostWinJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWinResponse, error)
}

type GetBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BalanceResponse
	JSON401      *externalRef0.ErrorResponseWithAction
	JSON404      *externalRef0.ErrorResponseWithAction
	JSON500      *externalRef0.ErrorResponseWithAction
}

// Status returns HTTPResponse.Status
func (r GetBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetResponse
	JSON400      *externalRef0.ErrorResponseWithAction
	JSON401      *externalRef0.ErrorResponseWithAction
	JSON404      *externalRef0.ErrorResponseWithAction
	JSON500      *externalRef0.ErrorResponseWithAction
}

// Status returns HTTPResponse.Status
func (r PostBetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRefundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RefundResponse
	JSON400      *externalRef0.ErrorResponseWithAction
	JSON401      *externalRef0.ErrorResponseWithAction
	JSON404      *externalRef0.ErrorResponseWithAction
	JSON500      *externalRef0.ErrorResponseWithAction
}

// Status returns HTTPResponse.Status
func (r PostRefundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRefundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WinResponse
	JSON400      *externalRef0.ErrorResponseWithAction
	JSON401      *externalRef0.ErrorResponseWithAction
	JSON404      *externalRef0.ErrorResponseWithAction
	JSON500      *externalRef0.ErrorResponseWithAction
}

// Status returns HTTPResponse.Status
func (r PostWinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBalanceWithResponse request returning *GetBalanceResponse
func (c *ClientWithResponses) GetBalanceWithResponse(ctx context.Context, params *GetBalanceParams, reqEditors ...RequestEditorFn) (*GetBalanceResponse, error) {
	rsp, err := c.GetBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBalanceResponse(rsp)
}

// PostBetWithBodyWithResponse request with arbitrary body returning *PostBetResponse
func (c *ClientWithResponses) PostBetWithBodyWithResponse(ctx context.Context, params *PostBetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBetResponse, error) {
	rsp, err := c.PostBetWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBetResponse(rsp)
}

func (c *ClientWithResponses) PostBetWithResponse(ctx context.Context, params *PostBetParams, body PostBetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBetResponse, error) {
	rsp, err := c.PostBet(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBetResponse(rsp)
}

// PostRefundWithBodyWithResponse request with arbitrary body returning *PostRefundResponse
func (c *ClientWithResponses) PostRefundWithBodyWithResponse(ctx context.Context, params *PostRefundParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRefundResponse, error) {
	rsp, err := c.PostRefundWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRefundResponse(rsp)
}

func (c *ClientWithResponses) PostRefundWithResponse(ctx context.Context, params *PostRefundParams, body PostRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRefundResponse, error) {
	rsp, err := c.PostRefund(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRefundResponse(rsp)
}

// PostWinWithBodyWithResponse request with arbitrary body returning *PostWinResponse
func (c *ClientWithResponses) PostWinWithBodyWithResponse(ctx context.Context, params *PostWinParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWinResponse, error) {
	rsp, err := c.PostWinWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWinResponse(rsp)
}

func (c *ClientWithResponses) PostWinWithResponse(ctx context.Context, params *PostWinParams, body PostWinJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWinResponse, error) {
	rsp, err := c.PostWin(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWinResponse(rsp)
}

// ParseGetBalanceResponse parses an HTTP response from a GetBalanceWithResponse call
func ParseGetBalanceResponse(rsp *http.Response) (*GetBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BalanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostBetResponse parses an HTTP response from a PostBetWithResponse call
func ParsePostBetResponse(rsp *http.Response) (*PostBetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostRefundResponse parses an HTTP response from a PostRefundWithResponse call
func ParsePostRefundResponse(rsp *http.Response) (*PostRefundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRefundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RefundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostWinResponse parses an HTTP response from a PostWinWithResponse call
func ParsePostWinResponse(rsp *http.Response) (*PostWinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WinResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponseWithAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get balance
	// (GET /balance)
	GetBalance(ctx echo.Context, params GetBalanceParams) error
	// Bet
	// (POST /bet)
	PostBet(ctx echo.Context, params PostBetParams) error
	// Refund
	// (POST /refund)
	PostRefund(ctx echo.Context, params PostRefundParams) error
	// Win
	// (POST /win)
	PostWin(ctx echo.Context, params PostWinParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBalance converts echo context to params.
func (w *ServerInterfaceWrapper) GetBalance(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBalanceParams
	// ------------- Required query parameter "sessionID" -------------

	err = runtime.BindQueryParameter("form", true, true, "sessionID", ctx.QueryParams(), &params.SessionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionID: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBalance(ctx, params)
	return err
}

// PostBet converts echo context to params.
func (w *ServerInterfaceWrapper) PostBet(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostBetParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostBet(ctx, params)
	return err
}

// PostRefund converts echo context to params.
func (w *ServerInterfaceWrapper) PostRefund(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostRefundParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRefund(ctx, params)
	return err
}

// PostWin converts echo context to params.
func (w *ServerInterfaceWrapper) PostWin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostWinParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWin(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/balance", wrapper.GetBalance)
	router.POST(baseURL+"/bet", wrapper.PostBet)
	router.POST(baseURL+"/refund", wrapper.PostRefund)
	router.POST(baseURL+"/win", wrapper.PostWin)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../common-components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
