// Package coreapiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package coreapiv1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/swipegames/public-api/api/v1.0"
)

// Defines values for CreateNewGameRequestPlatform.
const (
	Desktop CreateNewGameRequestPlatform = "desktop"
	Mobile  CreateNewGameRequestPlatform = "mobile"
)

// CreateFreeRoundsRequest defines model for CreateFreeRoundsRequest.
type CreateFreeRoundsRequest struct {
	// BetLine Number of bet line configured for this game/provider.
	BetLine int32 `json:"betLine"`

	// Cid Client's ID (internal)
	Cid openapi_types.UUID `json:"cid"`

	// Currency Currency code in ISO4217
	Currency string `json:"currency"`

	// ExtCID External Client's ID (game aggregator or casino)
	ExtCID string `json:"extCID"`

	// ExtID Free rounds ID (external). Used as idempotency key. Same ID can be used to create free rounds only once.
	ExtID string `json:"extID"`

	// GameID Game's ID
	GameID string `json:"gameID"`

	// Quantity Number of free rounds.
	Quantity int32 `json:"quantity"`

	// UserIDs List of player IDs (external). if null then campaign is available for all players.
	UserIDs *[]string `json:"userIDs,omitempty"`

	// ValidFrom Start date when free rounds become available.
	ValidFrom time.Time `json:"validFrom"`

	// ValidUntil End date when free rounds become unavailable. Could be setup later.
	ValidUntil *time.Time `json:"validUntil,omitempty"`
}

// CreateFreeRoundsResponse defines model for CreateFreeRoundsResponse.
type CreateFreeRoundsResponse struct {
	// ExtID Free rounds ID (external). This is provided in the request.
	ExtID string `json:"extID"`

	// Id Free rounds ID (internal).
	Id openapi_types.UUID `json:"id"`
}

// CreateNewGameRequest defines model for CreateNewGameRequest.
type CreateNewGameRequest struct {
	// CID Client's ID. It's provided by Swipe Games and is used as your identifier.
	CID openapi_types.UUID `json:"cID"`

	// Currency Currency code in ISO4217.
	Currency string `json:"currency"`

	// Demo Demo mode. If true, the game will be launched in demo mode (means no callbacks will be fired on your side,
	// and we use our demo balance for the game). If false, the game will be launched in real mode.
	Demo *bool `json:"demo,omitempty"`

	// ExtCID External Client's ID (client/platform/game aggregator/integrator or casino on your side). This is provided from your side, and this is
	// how you identify your clients. We use it in all callbacks to you. Not required for demo games, since we don't use callbacks for demo games.
	ExtCID *string `json:"extCID,omitempty"`

	// GameID Game's ID. This is Swipe Games's game identifier. See the list of supported games in `Game IDs` section.
	GameID string `json:"gameID"`

	// Language Language code in IIETF BCP 47 (ISO 639).
	Language *string `json:"language,omitempty"`

	// Platform Platform code. This is used to identify the platform where the game is launched.
	Platform *CreateNewGameRequestPlatform `json:"platform,omitempty"`

	// ReturnURL Return URL which we could use to redirect the user after the game is finished/exited. If you don't provide this URL, return button in the game will be disabled. Please make sure you provide this URL when using redirect to open the game, otherwise player cannot
	ReturnURL *string `json:"returnURL,omitempty"`

	// SessionID Session ID (game integrator or casino).This is your Session ID. We use
	// it in all callbacks to you. Not required for demo games, since we don't use callbacks for demo games.
	SessionID *string           `json:"sessionID,omitempty"`
	User      externalRef0.User `json:"user"`
}

// CreateNewGameRequestPlatform Platform code. This is used to identify the platform where the game is launched.
type CreateNewGameRequestPlatform string

// CreateNewGameResponse defines model for CreateNewGameResponse.
type CreateNewGameResponse struct {
	GameSessionID openapi_types.UUID `json:"gameSessionID"`
	GameUrl       string             `json:"gameUrl"`
}

// DeleteFreeRoundsRequest defines model for DeleteFreeRoundsRequest.
type DeleteFreeRoundsRequest struct {
	// Cid Client's ID (internal)
	Cid openapi_types.UUID `json:"cid"`

	// ExtID Free rounds ID (external). Used as idempotency key. One of id or extID must be provided.
	ExtID *string `json:"extID,omitempty"`

	// Id Free rounds ID (internal). Used as idempotency key. One of id or extID must be provided.
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// DeleteFreeRoundsResponse defines model for DeleteFreeRoundsResponse.
type DeleteFreeRoundsResponse struct {
	// ExtID Free rounds ID (external). It always provided on create request.
	ExtID string `json:"extID"`

	// Id Free rounds ID (internal).
	Id openapi_types.UUID `json:"id"`
}

// PostCreateNewGameParams defines parameters for PostCreateNewGame.
type PostCreateNewGameParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// DeleteFreeRoundsParams defines parameters for DeleteFreeRounds.
type DeleteFreeRoundsParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PostFreeRoundsParams defines parameters for PostFreeRounds.
type PostFreeRoundsParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PostCreateNewGameJSONRequestBody defines body for PostCreateNewGame for application/json ContentType.
type PostCreateNewGameJSONRequestBody = CreateNewGameRequest

// DeleteFreeRoundsJSONRequestBody defines body for DeleteFreeRounds for application/json ContentType.
type DeleteFreeRoundsJSONRequestBody = DeleteFreeRoundsRequest

// PostFreeRoundsJSONRequestBody defines body for PostFreeRounds for application/json ContentType.
type PostFreeRoundsJSONRequestBody = CreateFreeRoundsRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostCreateNewGameWithBody request with any body
	PostCreateNewGameWithBody(ctx context.Context, params *PostCreateNewGameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCreateNewGame(ctx context.Context, params *PostCreateNewGameParams, body PostCreateNewGameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFreeRoundsWithBody request with any body
	DeleteFreeRoundsWithBody(ctx context.Context, params *DeleteFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteFreeRounds(ctx context.Context, params *DeleteFreeRoundsParams, body DeleteFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFreeRoundsWithBody request with any body
	PostFreeRoundsWithBody(ctx context.Context, params *PostFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFreeRounds(ctx context.Context, params *PostFreeRoundsParams, body PostFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostCreateNewGameWithBody(ctx context.Context, params *PostCreateNewGameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreateNewGameRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreateNewGame(ctx context.Context, params *PostCreateNewGameParams, body PostCreateNewGameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreateNewGameRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFreeRoundsWithBody(ctx context.Context, params *DeleteFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFreeRoundsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFreeRounds(ctx context.Context, params *DeleteFreeRoundsParams, body DeleteFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFreeRoundsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFreeRoundsWithBody(ctx context.Context, params *PostFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFreeRoundsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFreeRounds(ctx context.Context, params *PostFreeRoundsParams, body PostFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFreeRoundsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostCreateNewGameRequest calls the generic PostCreateNewGame builder with application/json body
func NewPostCreateNewGameRequest(server string, params *PostCreateNewGameParams, body PostCreateNewGameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCreateNewGameRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCreateNewGameRequestWithBody generates requests for PostCreateNewGame with any type of body
func NewPostCreateNewGameRequestWithBody(server string, params *PostCreateNewGameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-new-game")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewDeleteFreeRoundsRequest calls the generic DeleteFreeRounds builder with application/json body
func NewDeleteFreeRoundsRequest(server string, params *DeleteFreeRoundsParams, body DeleteFreeRoundsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteFreeRoundsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDeleteFreeRoundsRequestWithBody generates requests for DeleteFreeRounds with any type of body
func NewDeleteFreeRoundsRequestWithBody(server string, params *DeleteFreeRoundsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/free-rounds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewPostFreeRoundsRequest calls the generic PostFreeRounds builder with application/json body
func NewPostFreeRoundsRequest(server string, params *PostFreeRoundsParams, body PostFreeRoundsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFreeRoundsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostFreeRoundsRequestWithBody generates requests for PostFreeRounds with any type of body
func NewPostFreeRoundsRequestWithBody(server string, params *PostFreeRoundsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/free-rounds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostCreateNewGameWithBodyWithResponse request with any body
	PostCreateNewGameWithBodyWithResponse(ctx context.Context, params *PostCreateNewGameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreateNewGameResponse, error)

	PostCreateNewGameWithResponse(ctx context.Context, params *PostCreateNewGameParams, body PostCreateNewGameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreateNewGameResponse, error)

	// DeleteFreeRoundsWithBodyWithResponse request with any body
	DeleteFreeRoundsWithBodyWithResponse(ctx context.Context, params *DeleteFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFreeRoundsResponse, error)

	DeleteFreeRoundsWithResponse(ctx context.Context, params *DeleteFreeRoundsParams, body DeleteFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFreeRoundsResponse, error)

	// PostFreeRoundsWithBodyWithResponse request with any body
	PostFreeRoundsWithBodyWithResponse(ctx context.Context, params *PostFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFreeRoundsResponse, error)

	PostFreeRoundsWithResponse(ctx context.Context, params *PostFreeRoundsParams, body PostFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFreeRoundsResponse, error)
}

type PostCreateNewGameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateNewGameResponse
	JSON401      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostCreateNewGameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreateNewGameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFreeRoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteFreeRoundsResponse
	JSON401      *externalRef0.ErrorResponse
	JSON404      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteFreeRoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFreeRoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFreeRoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateFreeRoundsResponse
	JSON401      *externalRef0.ErrorResponse
	JSON409      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostFreeRoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFreeRoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostCreateNewGameWithBodyWithResponse request with arbitrary body returning *PostCreateNewGameResponse
func (c *ClientWithResponses) PostCreateNewGameWithBodyWithResponse(ctx context.Context, params *PostCreateNewGameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreateNewGameResponse, error) {
	rsp, err := c.PostCreateNewGameWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreateNewGameResponse(rsp)
}

func (c *ClientWithResponses) PostCreateNewGameWithResponse(ctx context.Context, params *PostCreateNewGameParams, body PostCreateNewGameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreateNewGameResponse, error) {
	rsp, err := c.PostCreateNewGame(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreateNewGameResponse(rsp)
}

// DeleteFreeRoundsWithBodyWithResponse request with arbitrary body returning *DeleteFreeRoundsResponse
func (c *ClientWithResponses) DeleteFreeRoundsWithBodyWithResponse(ctx context.Context, params *DeleteFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFreeRoundsResponse, error) {
	rsp, err := c.DeleteFreeRoundsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFreeRoundsResponse(rsp)
}

func (c *ClientWithResponses) DeleteFreeRoundsWithResponse(ctx context.Context, params *DeleteFreeRoundsParams, body DeleteFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFreeRoundsResponse, error) {
	rsp, err := c.DeleteFreeRounds(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFreeRoundsResponse(rsp)
}

// PostFreeRoundsWithBodyWithResponse request with arbitrary body returning *PostFreeRoundsResponse
func (c *ClientWithResponses) PostFreeRoundsWithBodyWithResponse(ctx context.Context, params *PostFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFreeRoundsResponse, error) {
	rsp, err := c.PostFreeRoundsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFreeRoundsResponse(rsp)
}

func (c *ClientWithResponses) PostFreeRoundsWithResponse(ctx context.Context, params *PostFreeRoundsParams, body PostFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFreeRoundsResponse, error) {
	rsp, err := c.PostFreeRounds(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFreeRoundsResponse(rsp)
}

// ParsePostCreateNewGameResponse parses an HTTP response from a PostCreateNewGameWithResponse call
func ParsePostCreateNewGameResponse(rsp *http.Response) (*PostCreateNewGameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreateNewGameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateNewGameResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteFreeRoundsResponse parses an HTTP response from a DeleteFreeRoundsWithResponse call
func ParseDeleteFreeRoundsResponse(rsp *http.Response) (*DeleteFreeRoundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFreeRoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteFreeRoundsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostFreeRoundsResponse parses an HTTP response from a PostFreeRoundsWithResponse call
func ParsePostFreeRoundsResponse(rsp *http.Response) (*PostFreeRoundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFreeRoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateFreeRoundsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /create-new-game)
	PostCreateNewGame(ctx echo.Context, params PostCreateNewGameParams) error

	// (DELETE /free-rounds)
	DeleteFreeRounds(ctx echo.Context, params DeleteFreeRoundsParams) error

	// (POST /free-rounds)
	PostFreeRounds(ctx echo.Context, params PostFreeRoundsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCreateNewGame converts echo context to params.
func (w *ServerInterfaceWrapper) PostCreateNewGame(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCreateNewGameParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCreateNewGame(ctx, params)
	return err
}

// DeleteFreeRounds converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFreeRounds(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteFreeRoundsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFreeRounds(ctx, params)
	return err
}

// PostFreeRounds converts echo context to params.
func (w *ServerInterfaceWrapper) PostFreeRounds(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostFreeRoundsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFreeRounds(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/create-new-game", wrapper.PostCreateNewGame)
	router.DELETE(baseURL+"/free-rounds", wrapper.DeleteFreeRounds)
	router.POST(baseURL+"/free-rounds", wrapper.PostFreeRounds)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../common-components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
